//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/mysql"
)

var SalesByStore = newSalesByStoreTable("sakila", "sales_by_store", "")

type salesByStoreTable struct {
	mysql.Table

	// Columns
	Store      mysql.ColumnString
	Manager    mysql.ColumnString
	TotalSales mysql.ColumnFloat

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type SalesByStoreTable struct {
	salesByStoreTable

	NEW salesByStoreTable
}

// AS creates new SalesByStoreTable with assigned alias
func (a SalesByStoreTable) AS(alias string) *SalesByStoreTable {
	return newSalesByStoreTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new SalesByStoreTable with assigned schema name
func (a SalesByStoreTable) FromSchema(schemaName string) *SalesByStoreTable {
	return newSalesByStoreTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new SalesByStoreTable with assigned table prefix
func (a SalesByStoreTable) WithPrefix(prefix string) *SalesByStoreTable {
	return newSalesByStoreTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new SalesByStoreTable with assigned table suffix
func (a SalesByStoreTable) WithSuffix(suffix string) *SalesByStoreTable {
	return newSalesByStoreTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newSalesByStoreTable(schemaName, tableName, alias string) *SalesByStoreTable {
	return &SalesByStoreTable{
		salesByStoreTable: newSalesByStoreTableImpl(schemaName, tableName, alias),
		NEW:               newSalesByStoreTableImpl("", "new", ""),
	}
}

func newSalesByStoreTableImpl(schemaName, tableName, alias string) salesByStoreTable {
	var (
		StoreColumn      = mysql.StringColumn("store")
		ManagerColumn    = mysql.StringColumn("manager")
		TotalSalesColumn = mysql.FloatColumn("total_sales")
		allColumns       = mysql.ColumnList{StoreColumn, ManagerColumn, TotalSalesColumn}
		mutableColumns   = mysql.ColumnList{StoreColumn, ManagerColumn, TotalSalesColumn}
	)

	return salesByStoreTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		Store:      StoreColumn,
		Manager:    ManagerColumn,
		TotalSales: TotalSalesColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
