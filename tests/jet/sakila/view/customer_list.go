//
// Code generated by go-jet DO NOT EDIT.
//
// WARNING: Changes to this file may cause incorrect behavior
// and will be lost if the code is regenerated
//

package view

import (
	"github.com/go-jet/jet/v2/mysql"
)

var CustomerList = newCustomerListTable("sakila", "customer_list", "")

type customerListTable struct {
	mysql.Table

	// Columns
	ID      mysql.ColumnInteger
	Name    mysql.ColumnString
	Address mysql.ColumnString
	ZipCode mysql.ColumnString
	Phone   mysql.ColumnString
	City    mysql.ColumnString
	Country mysql.ColumnString
	Notes   mysql.ColumnString
	Sid     mysql.ColumnInteger

	AllColumns     mysql.ColumnList
	MutableColumns mysql.ColumnList
}

type CustomerListTable struct {
	customerListTable

	NEW customerListTable
}

// AS creates new CustomerListTable with assigned alias
func (a CustomerListTable) AS(alias string) *CustomerListTable {
	return newCustomerListTable(a.SchemaName(), a.TableName(), alias)
}

// Schema creates new CustomerListTable with assigned schema name
func (a CustomerListTable) FromSchema(schemaName string) *CustomerListTable {
	return newCustomerListTable(schemaName, a.TableName(), a.Alias())
}

// WithPrefix creates new CustomerListTable with assigned table prefix
func (a CustomerListTable) WithPrefix(prefix string) *CustomerListTable {
	return newCustomerListTable(a.SchemaName(), prefix+a.TableName(), a.TableName())
}

// WithSuffix creates new CustomerListTable with assigned table suffix
func (a CustomerListTable) WithSuffix(suffix string) *CustomerListTable {
	return newCustomerListTable(a.SchemaName(), a.TableName()+suffix, a.TableName())
}

func newCustomerListTable(schemaName, tableName, alias string) *CustomerListTable {
	return &CustomerListTable{
		customerListTable: newCustomerListTableImpl(schemaName, tableName, alias),
		NEW:               newCustomerListTableImpl("", "new", ""),
	}
}

func newCustomerListTableImpl(schemaName, tableName, alias string) customerListTable {
	var (
		IDColumn       = mysql.IntegerColumn("ID")
		NameColumn     = mysql.StringColumn("name")
		AddressColumn  = mysql.StringColumn("address")
		ZipCodeColumn  = mysql.StringColumn("zip code")
		PhoneColumn    = mysql.StringColumn("phone")
		CityColumn     = mysql.StringColumn("city")
		CountryColumn  = mysql.StringColumn("country")
		NotesColumn    = mysql.StringColumn("notes")
		SidColumn      = mysql.IntegerColumn("SID")
		allColumns     = mysql.ColumnList{IDColumn, NameColumn, AddressColumn, ZipCodeColumn, PhoneColumn, CityColumn, CountryColumn, NotesColumn, SidColumn}
		mutableColumns = mysql.ColumnList{IDColumn, NameColumn, AddressColumn, ZipCodeColumn, PhoneColumn, CityColumn, CountryColumn, NotesColumn, SidColumn}
	)

	return customerListTable{
		Table: mysql.NewTable(schemaName, tableName, alias, allColumns...),

		//Columns
		ID:      IDColumn,
		Name:    NameColumn,
		Address: AddressColumn,
		ZipCode: ZipCodeColumn,
		Phone:   PhoneColumn,
		City:    CityColumn,
		Country: CountryColumn,
		Notes:   NotesColumn,
		Sid:     SidColumn,

		AllColumns:     allColumns,
		MutableColumns: mutableColumns,
	}
}
